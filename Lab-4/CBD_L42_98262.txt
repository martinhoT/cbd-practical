// NMEC: 98262

#1
MATCH (a:Person)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Person)
RETURN a.name AS name, m.title AS title;

#2
MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2005
RETURN collect(a.name) AS actors, m.title AS title;

#3
MATCH (n)--(m)
WITH *, count(*) AS nRelations
WHERE nRelations > 1
RETURN n, m, nRelations;

#4
MATCH (p1:Person)-[:REVIEWED]->(m:Movie)<-[:REVIEWED]-(p2:Person)
WHERE p1 < p2
RETURN p1.name AS name1, p2.name AS name2, m.title AS movie;

#5
MATCH (a1:Person)-[:ACTED_IN]->(:Movie)<-[:ACTED_IN]-(a2:Person)
WITH *, count(*) AS nMovies
WHERE nMovies > 1 AND a1 < a2
RETURN a1.name, a2.name;

#6
MATCH (a:Person)-[:ACTED_IN]->(m:Movie {title: 'Apollo 13'})
WITH m, avg(a.born) AS avgBorn
RETURN m.released - avgBorn AS age;

#7
MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
WITH m, m.released - avg(a.born) AS castAge
RETURN m.title AS movie, round(castAge, 2)
ORDER BY castAge DESC LIMIT 10;

#8
CALL {
    MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
    WITH m, m.released - avg(a.born) AS castAge
    RETURN m
    ORDER BY castAge ASC
    LIMIT 1
}
MATCH (a:Person)-[:ACTED_IN]->(m)
RETURN a, m;

#9
MATCH p = shortestpath((john:Person {name: 'John Cusack'})-[*]-(demi:Person {name: 'Demi Moore'}))
RETURN p;

#10
MATCH p = shortestpath((keanu:Person {name: 'Keanu Reeves'})-[*]-(tom:Person {name: 'Tom Cruise'}))
RETURN length(p) AS dim;

#11
MATCH p = shortestpath((jim:Person)-[*]-(kevin:Person))
WHERE jim.name STARTS WITH 'Jim ' AND kevin.name STARTS WITH 'Kevin '
RETURN length(p) AS dim
ORDER BY dim ASC
LIMIT 1;

#12
MATCH (p:Person)-[*2]-(jim:Person {name: 'Jim Cash'})
RETURN p;
Neste caso, nenhum dos nós que esta query retorna possui relações com outros nós Person diretamente, portanto neste caso acaba por ser o caminho mais curto entre Jim Cash e cada um dos outros nós (os caminho passam por filmes, portanto nunca poderia ser um nó 'Jim Cash').

#13
CALL {
    MATCH p = shortestpath((kevin:Person {name: 'Kevin Bacon'})-[r*]-(person:Person))
    WHERE person.name <> 'Kevin Bacon'
    RETURN p
}
WITH max(length(p)) as maxDistance
RETURN maxDistance;

#14
CALL {
    MATCH p = shortestpath((p1:Person)-[r*]-(p2:Person))
    WHERE p1 <> p2
    RETURN p
}
WITH max(length(p)) as maxDistance
RETURN maxDistance;

#15
MATCH p = shortestpath((p1:Person)-[r*]-(p2:Person))
WHERE p1 < p2
RETURN length(p) AS distance, count(*) as nPairs
ORDER BY distance ASC;

#16 (?DOUBT? média)
MATCH p = (p1:Person)-[:ACTED_IN*10]-(p2:Person)
WITH p1, p2, avg(length(p)) AS avgDistance
WHERE p1 < p2
RETURN p1.name AS person1, p2.name AS person2
ORDER BY avgDistance ASC
LIMIT 10;

#17
Apresente os atores que tiveram pelo menos uma role para personagens com o prefixo 'Dr.', em conjunto com a lista dessas roles para cada um.

MATCH (p:Person)-[r:ACTED_IN]->(:Movie)
UNWIND r.roles AS role
WITH p, role
WHERE role STARTS WITH 'Dr.'
RETURN p AS actor, collect(role) AS roles;

╒════════════════════════════════════════╤════════════════════════════════════════╕
│"actor"                                 │"roles"                                 │
╞════════════════════════════════════════╪════════════════════════════════════════╡
│{"born":1948,"name":"Christopher Guest"}│["Dr. Stone"]                           │
├────────────────────────────────────────┼────────────────────────────────────────┤
│{"born":1956,"name":"Tom Hanks"}        │["Dr. Henry Goose","Dr. Robert Langdon"]│
├────────────────────────────────────────┼────────────────────────────────────────┤
│{"born":1963,"name":"Helen Hunt"}       │["Dr. Jo Harding"]                      │
└────────────────────────────────────────┴────────────────────────────────────────┘

#18
Apresente o título dos filmes que foram analisados e uma tag dependendo das seguintes condições:
- caso o filme tenha sido analisado por apenas analisadores com mais de 5 análises e esse analisador esteja a ser seguido por outros, apresenta a tag 'Complete'
- se não, se o filme tiver sido analisado por pelo menos um analisador com 5 análises ou menos e esse analisador esteja a ser seguido por outros, apresenta a tag 'On review'
- caso contrário, apresenta a tag 'Uncertain'.

CALL {
    MATCH (p:Person)-[:REVIEWED]->(mOther:Movie)
    WITH p, count(mOther) AS pMovies
    RETURN p, pMovies
}
MATCH
(p)-[:REVIEWED]->(m:Movie)
WITH m, p, pMovies, CASE
        WHEN (:Person)-[:FOLLOWS]->(p) AND pMovies > 5 THEN 'Complete'
        WHEN (:Person)-[:FOLLOWS]->(p) THEN 'On review'
        ELSE 'Uncertain'
    END AS tag
WITH m, collect(tag) AS tags
RETURN m AS movie, CASE
        WHEN 'On review' IN tags THEN 'On review'
        WHEN 'Uncertain' IN tags THEN 'Uncertain'
        ELSE 'Complete'
    END AS tag;

╒══════════════════════════════════════════════════════════════════════╤═══════════╕
│"movie"                                                               │"tag"      │
╞══════════════════════════════════════════════════════════════════════╪═══════════╡
│{"tagline":"Break The Codes","title":"The Da Vinci Code","released":20│"Uncertain"│
│06}                                                                   │           │
├──────────────────────────────────────────────────────────────────────┼───────────┤
│{"tagline":"Pain heals, Chicks dig scars... Glory lasts forever","titl│"On review"│
│e":"The Replacements","released":2000}                                │           │
├──────────────────────────────────────────────────────────────────────┼───────────┤
│{"tagline":"The rest of his life begins now.","title":"Jerry Maguire",│"Complete" │
│"released":2000}                                                      │           │
├──────────────────────────────────────────────────────────────────────┼───────────┤
│{"tagline":"Everything is connected","title":"Cloud Atlas","released":│"Complete" │
│2012}                                                                 │           │
├──────────────────────────────────────────────────────────────────────┼───────────┤
│{"tagline":"Come as you are","title":"The Birdcage","released":1996}  │"Complete" │
├──────────────────────────────────────────────────────────────────────┼───────────┤
│{"tagline":"It's a hell of a thing, killing a man","title":"Unforgiven│"Complete" │
│","released":1992}                                                    │           │
└──────────────────────────────────────────────────────────────────────┴───────────┘

#19
Apresente o analisador e a análise que efetuou se incluir a palavra 'fun'.

MATCH (p:Person)-[r:REVIEWED]->()
WHERE toLower(r.summary) =~ '.*\\bfun\\b.*'
RETURN p AS reviewer, r AS review;

╒═══════════════════════════╤═══════════════════════════════════════════════════════╕
│"reviewer"                 │"review"                                               │
╞═══════════════════════════╪═══════════════════════════════════════════════════════╡
│{"name":"Jessica Thompson"}│{"summary":"Silly, but fun","rating":65}               │
├───────────────────────────┼───────────────────────────────────────────────────────┤
│{"name":"James Thompson"}  │{"summary":"Fun, but a little far fetched","rating":65}│
└───────────────────────────┴───────────────────────────────────────────────────────┘

#20
Apresente os filmes cujo caminho mais curto entre eles, com tamanho entre 4 e 8 inclusivé, passa por pelo menos um dos filmes 'The Matrix' (incluindo sequelas).

MATCH p=shortestpath((m1:Movie)-[*0..8]-(m2:Movie))
WHERE m1 < m2
WITH m1, m2, [m IN nodes(p) WHERE m.title STARTS WITH 'The Matrix' AND m <> m1 AND m <> m2] AS matrices, length(p) AS pathLength
WHERE pathLength >= 4 AND size(matrices) > 0
RETURN m1 AS movie1, m2 AS movie2;

╒══════════════════════════════════════════════════════════════════════╤══════════════════════════════════════════════════════════════════════╕
│"movie1"                                                              │"movie2"                                                              │
╞══════════════════════════════════════════════════════════════════════╪══════════════════════════════════════════════════════════════════════╡
│{"tagline":"Evil has its winning ways","title":"The Devil's Advocate",│{"tagline":"First loves last. Forever.","title":"Snow Falling on Cedar│
│"released":1997}                                                      │s","released":1999}                                                   │
├──────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────┤
│{"tagline":"Evil has its winning ways","title":"The Devil's Advocate",│{"tagline":"Freedom! Forever!","title":"V for Vendetta","released":200│
│"released":1997}                                                      │6}                                                                    │
├──────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────┤
│{"tagline":"Evil has its winning ways","title":"The Devil's Advocate",│{"tagline":"Speed has no limits","title":"Speed Racer","released":2008│
│"released":1997}                                                      │}                                                                     │
├──────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────┤
│{"tagline":"Evil has its winning ways","title":"The Devil's Advocate",│{"tagline":"Prepare to enter a secret world of assassins","title":"Nin│
│"released":1997}                                                      │ja Assassin","released":2009}                                         │
├──────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────┤
│{"tagline":"First loves last. Forever.","title":"Snow Falling on Cedar│{"tagline":"The hottest data on earth. In the coolest head in town","t│
│s","released":1999}                                                   │itle":"Johnny Mnemonic","released":1995}                              │
├──────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────┤
│{"tagline":"The hottest data on earth. In the coolest head in town","t│{"tagline":"Freedom! Forever!","title":"V for Vendetta","released":200│
│itle":"Johnny Mnemonic","released":1995}                              │6}                                                                    │
├──────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────┤
│{"tagline":"The hottest data on earth. In the coolest head in town","t│{"tagline":"Speed has no limits","title":"Speed Racer","released":2008│
│itle":"Johnny Mnemonic","released":1995}                              │}                                                                     │
├──────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────┤
│{"tagline":"The hottest data on earth. In the coolest head in town","t│{"tagline":"Prepare to enter a secret world of assassins","title":"Nin│
│itle":"Johnny Mnemonic","released":1995}                              │ja Assassin","released":2009}                                         │
├──────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────┤
│{"tagline":"Freedom! Forever!","title":"V for Vendetta","released":200│{"title":"Something's Gotta Give","released":2003}                    │
│6}                                                                    │                                                                      │
├──────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────┤
│{"tagline":"Speed has no limits","title":"Speed Racer","released":2008│{"title":"Something's Gotta Give","released":2003}                    │
│}                                                                     │                                                                      │
├──────────────────────────────────────────────────────────────────────┼──────────────────────────────────────────────────────────────────────┤
│{"tagline":"Prepare to enter a secret world of assassins","title":"Nin│{"title":"Something's Gotta Give","released":2003}                    │
│ja Assassin","released":2009}                                         │                                                                      │
└──────────────────────────────────────────────────────────────────────┴──────────────────────────────────────────────────────────────────────┘



